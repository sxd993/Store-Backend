import express from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import { checkConnection } from './database/index.js';
import { catalogRoutes } from './catalog/index.js';
import { authRoutes } from './auth/index.js';
import { cartRoutes } from './cart/index.js';
import { bestOffersRoutes } from './bestOffers/index.js';

const app = express();
const PORT = process.env.PORT || 8000;

// –ü—Ä–æ—Å—Ç—ã–µ middleware
app.use(cors({ 
  origin: true, 
  credentials: true 
}));
app.use(express.json());
app.use(cookieParser());

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'NNV Store API',
    version: '1.0.0',
    endpoints: {
      // –ö–∞—Ç–∞–ª–æ–≥
      catalog: 'GET /catalog?page=1&per_page=20',
      product: 'GET /catalog/:id',
      addProduct: 'POST /catalog',
      updateProduct: 'PUT /catalog/:id',
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      register: 'POST /auth/register',
      login: 'POST /auth/login',
      profile: 'GET /auth/me',
      logout: 'POST /auth/logout'
    }
  });
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.use('', catalogRoutes);
app.use('', authRoutes);
app.use('', bestOffersRoutes);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', async (req, res) => {
  const dbConnected = await checkConnection();
  res.json({
    success: true,
    status: 'OK',
    database: dbConnected ? 'connected' : 'disconnected',
    timestamp: new Date().toISOString()
  });
});


// –ö–æ—Ä–∑–∏–Ω–∞
app.use('/api', cartRoutes);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: `–ú–∞—Ä—à—Ä—É—Ç ${req.method} ${req.url} –Ω–µ –Ω–∞–π–¥–µ–Ω`
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞:', err);
  res.status(500).json({
    success: false,
    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT_SECRET
  if (!process.env.JWT_SECRET) {
    console.error('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
  const dbConnected = await checkConnection();
  if (!dbConnected) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìù –ì–ª–∞–≤–Ω–∞—è: http://localhost:${PORT}/`);
    console.log(`‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
startServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});